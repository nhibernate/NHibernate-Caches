//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#region License

//
//  SysCache - A cache provider for NHibernate using System.Web.Caching.Cache.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// CLOVER:OFF
//

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using log4net.Config;
using NHibernate.Cache;
using NHibernate.Caches.Common.Tests;
using NUnit.Framework;

namespace NHibernate.Caches.SysCache.Tests
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class SysCacheFixture : CacheFixture
	{

		[Test]
		public async Task TestAfterClearCanPutAsync()
		{
			const string key = "keyTestAfterClearCanPut";
			const string value = "value";

			var cache = GetDefaultCache();
			Assert.That(cache, Is.Not.Null, "no cache returned");

			// add the item
			await (cache.PutAsync(key, value, CancellationToken.None));

			Assert.That(HttpRuntime.Cache.Count, Is.GreaterThan(0), "cache is empty");

			// clear the System.Web.HttpRuntime.Cache
			var keys = new List<string>();

			foreach (DictionaryEntry entry in HttpRuntime.Cache)
			{
				keys.Add(entry.Key.ToString());
			}

			foreach (var cachekey in keys)
			{
				HttpRuntime.Cache.Remove(cachekey);
			}

			Assert.That(HttpRuntime.Cache.Count, Is.EqualTo(0), "cache isn't empty");

			// make sure we don't get an item
			var item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.That(item, Is.Null, "item still exists in cache");

			// add the item again
			await (cache.PutAsync(key, value, CancellationToken.None));

			item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.That(item, Is.Not.Null, "couldn't find item in cache");
		}
	}
}
