<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/release/0.85/nant.xsd">

  <property name="framework.family" value="${framework::get-family(framework::get-target-framework())}"/>
  <property name="framework.version" value="${framework::get-version(framework::get-target-framework())}"/>

  <property name="key.file" value="../NHibernate.Caches.snk" />

  <property name="net.target-fx" value="net461" />
  <property name="net.core-fx" value="net8.0" />

  <property name="nant-version.current" value="${assemblyname::get-version(assembly::get-name(nant::get-assembly()))}" />
  <property name="nant-version.required" value="0.85.2478.0" />
  <!-- Nant 0.85 release version -->
  <property name="nant-version.beta1_086" value="0.86.2898.0" />
  <!-- Nant 0.86 Beta 1 -->

  <!-- This is used only for build folder -->
  <!-- TODO: Either remove or refactor to use NHibernate.Caches.props -->
  <property name="project.version" value="5.9.0" overwrite="false" />

  <!-- named project configurations -->
  <target name="set-debug-project-configuration" description="Perform a 'debug' build">
    <property name="build.release" value="false" />
    <property name="build.debug" value="true" />
    <property name="build.name" value="NHibernate-Caches-${project.version}-${project.config}" />
    <property name="build.config" value="Debug" />
  </target>

  <target name="set-release-project-configuration" description="Perform a 'release' build">
    <property name="build.release" value="true" />
    <property name="build.debug" value="pdbonly" />
    <property name="build.name" value="NHibernate-Caches-${project.version}" />
    <property name="build.config" value="Release" />
  </target>

  <target name="set-project-configuration">
    <property name="project.config" value="debug" overwrite="false" />
    <if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
      <fail message="Unknown configuration: '${project.config}'" />
    </if>

    <call target="set-${project.config}-project-configuration" />

    <property name="build.root.dir" value="${root.dir}/build/${build.name}" />
    <property name="build.dir" value="${build.root.dir}" />
    <property name="bin.dir" value="${build.dir}/bin" />
  </target>

  <target name="init" depends="set-project-configuration">
    <property name="tools.dir" value="${root.dir}/Tools" />
    <property name="testresults.dir" value="${build.dir}/bin/test-results" />
    <property name="nuget.nupackages.dir" value="${path::get-full-path(path::combine(build.dir, 'nuget_gallery'))}" />
    <mkdir dir="${bin.dir}"/>
    <mkdir dir="${testresults.dir}"/>
  </target>
  
  <target name="bin-pack-common">
    <property name="bin-pack.tmpdir" value="${build.dir}/tmp-bin" />
    <property name="bin-pack.project.deploy" value="${bin-pack.tmpdir}/${bin-pack.project.name}" />
    <property name="bin-pack.full-project.name" value="NHibernate.Caches.${bin-pack.project.name}" />
    <mkdir dir="${bin-pack.project.deploy}"/>
    <copy file="${root.dir}/NHibernate.Caches.snk" todir="${bin-pack.project.deploy}"/>
    <copy todir="${bin-pack.project.deploy}">
      <fileset basedir="${root.dir}/${bin-pack.project.name}/${bin-pack.full-project.name}/bin/${build.config}/${net.target-fx}">
        <include name="${bin-pack.full-project.name}.*" />
      </fileset>
    </copy>
    <copy todir="${bin.dir}/${bin-pack.project.name}">
      <fileset basedir="${bin-pack.project.deploy}">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <target name="common.compile-all" depends="init common.solution-restore">
    <exec program="${path::combine(tools.dir, 'dotnet.cmd')}" verbose="true">
      <arg value="${root.dir}/NHibernate.Caches.Everything.sln" />
      <arg value="/p:Platform=&quot;Any CPU&quot;" />
      <arg value="/p:Configuration=&quot;${build.config}&quot;"/>
      <arg value="/p:GeneratePackageOnBuild=&quot;True&quot;" />
      <arg value="/p:IncludeSymbols=&quot;True&quot;" />
      <arg value="/p:IncludeSource=&quot;True&quot;" />
      <arg value="/p:PackageOutputPath=&quot;${nuget.nupackages.dir}&quot;" />
      <arg value="/t:Restore" />
      <arg value="/t:Rebuild" />
      <arg value="/v:q" />
      <arg value="/m" />
    </exec>
  </target>

  <target name="common.tools-restore" depends="init">
    <exec workingdir="${root.dir}" program="dotnet" verbose="true">
      <arg line="tool restore" />
    </exec>
    <exec workingdir="${root.dir}/Tools" program="dotnet" verbose="true">
      <arg line="restore ./packages.csproj --packages ." />
    </exec>
  </target>

  <target name="common.solution-restore" depends="common.tools-restore">
    <exec program="${path::combine(tools.dir, 'dotnet.cmd')}" verbose="true">
      <arg value="/t:Restore" />
      <arg value="${root.dir}/NHibernate.Caches.Everything.sln" />
    </exec>
  </target>

  <target name="get-tool-info" depends="common.tools-restore">
    <xmlpeek
      file="${tools.dir}/packages.csproj"
      xpath="/Project/ItemGroup/PackageReference[@Include = '${tool.id}']/@Version"
      property="tool.version" />
    <property name="tool.path" value="${tools.dir}/${tool.id}/${tool.version}/" />
  </target>

  <target name="common.find-nunit">
    <property name="tool.id" value="NUnit.ConsoleRunner" />
    <call target="get-tool-info" />
    <property name="nunit-console" value="${tool.path}tools/nunit3-console.exe" />
  </target>

  <target name="common.run-tests"
          description="Run NUnit tests">
    <call target="common.find-nunit" unless="${property::exists('nunit.found')}" />
    <property name="common.run-tests.failonerror" value="${not property::exists(test.file + '.IgnoreFail')}"/>
    <property name="common.run-tests.x86" value="--x86" unless="${property::exists('nunit-x64')}" />
    <property name="common.run-tests.x86" value="" if="${property::exists('nunit-x64')}" />
    <exec program="${nunit-console}" failonerror="${common.run-tests.failonerror}">
      <arg line="${root.dir}/${test.project}/${test.file}/bin/${build.config}/${net.target-fx}/${test.file}.dll --result=${testresults.dir}/${test.file}.dll-results.xml;format=nunit2 --framework=${framework::get-target-framework()} ${common.run-tests.x86}" />
    </exec>
  </target>

  <target name="common.run-core-tests"
          description="Run Core tests">
    <property name="common.run-tests.failonerror" value="${not property::exists(test.file + '.IgnoreFail')}"/>
    <exec program="dotnet" failonerror="${common.run-tests.failonerror}">
      <arg line="${root.dir}/${test.project}/${test.file}/bin/${build.config}/${net.core-fx}/${test.file}.dll --labels=before --nocolor --result=${testresults.dir}/${test.file}.dll-core-results.xml" />
    </exec>
  </target>

  <target name="common.nuget-pushbat"
          description="Creates files for the release on nuget gallery.">

    <property name="nuget.nupackages.pushbatfile" value="${path::combine(nuget.nupackages.dir, 'NuGetPush.bat')}" />

    <echo message="rem In order to use this bat you have to be sure you have executed 'nuget SetApiKey' ${environment::newline()}" file="${nuget.nupackages.pushbatfile}" append="false"/>
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${nuget.nupackages.dir}/*.nupkg"/>
        </items>
      </in>
      <do>
        <echo message="nuget push -source https://api.nuget.org/v3/index.json ${filename} ${environment::newline()}" file="${nuget.nupackages.pushbatfile}" append="true"/>
      </do>
    </foreach>
  </target>

  <target name="common.clean">
    <delete dir="${root.dir}/${clean.project}/NHibernate.Caches.${clean.project}/bin" failonerror="false" />
    <delete dir="${root.dir}/${clean.project}/NHibernate.Caches.${clean.project}/obj" failonerror="false" />
    <delete dir="${root.dir}/${clean.project}/NHibernate.Caches.${clean.project}.Tests/bin" failonerror="false" />
    <delete dir="${root.dir}/${clean.project}/NHibernate.Caches.${clean.project}.Tests/obj" failonerror="false" />
  </target>

</project>
